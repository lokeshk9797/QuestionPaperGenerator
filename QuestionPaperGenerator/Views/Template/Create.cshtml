
@model QuestionPaperGenerator.ViewModels.TemplateViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm("Create", "Template", FormMethod.Post, new { id = "templateForm" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Template</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Template.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Template.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Template.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Template.Formula, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Template.Formula, new { htmlAttributes = new { @id = "Template", @class = "form-control", @onchange = "onChange();" } })
            @Html.ValidationMessageFor(model => model.Template.Formula, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
            @Html.LabelFor(model => model.Variables, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="VariableSelectList" name="SelectedEntry" onchange="valueSelected()" class="form-control">
                    <option value="">Select a Variable</option>
                </select>
               @* @Html.DropDownList(model=>model.SelectedId, "Select Class", new { @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.Variables, "", new { @class = "text-danger" })
            </div>
        </div>
    

    <div class="form-group">
        @Html.Label("Minimum Value :", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Variables.FirstOrDefault().MinValue, new { htmlAttributes = new { @id = "MinValue", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Variables.FirstOrDefault().MinValue, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Maximum Value :", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Variables.FirstOrDefault().MaxValue, new { htmlAttributes = new { @id = "MaxValue", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Variables.FirstOrDefault().MaxValue, "", new { @class = "text-danger" })
        </div>
    </div>

    <div><input type="button"name="Add" value="Add" class="btn btn-primary" onclick="AddVariable()" /></div>
    <div id="Container">

    </div>


    <script>

        function onChange() {
            var rx = /[^{\}]+(?=})/g
            var formula = document.getElementById("Template").value;
            var myArray = formula.match(rx)

            var select = document.getElementById("VariableSelectList");
            $("#VariableSelectList").empty();
            var SelectOption = document.createElement("option");
            SelectOption.text = "Select a Variable";
            select.add(SelectOption);
            for (var i = 0; i < myArray.length; i++) {
                var option = document.createElement("option");
                option.text = myArray[i];
                option.value = myArray[i];

                select.add(option);
            }
        }
        function setLable(variable, minValue, maxValue) {
            var form = $("#templateForm");

            $("<Label>").text("Name : " + variable + " Frequency : " + minValue + " Marks : " + maxValue).appendTo(form);
            $("<br>").appendTo(form);


        }

        var count = 0;
        function AddVariable() {
            var variable = $("#VariableSelectList").val();
            var minValue = $("#MinValue").val();
            var maxValue = $("#MaxValue").val();
            setLable(variable, minValue, maxValue);
            var form = $("#templateForm");
            $('<input>').attr({
                type: 'hidden',
                name: "Variables[" + count + "].Name",
                value: variable
            }).appendTo(form);

            $('<input>').attr({
                type: 'hidden',
                name: "Variables[" + count + "].MaxValue",
                value: maxValue
            }).appendTo(form);

            $('<input>').attr({
                type: 'hidden',
                name: "Variables[" + count + "].MinValue",
                value: minValue
            }).appendTo(form);
            count++;
    }



    </script>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
